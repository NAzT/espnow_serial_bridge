{"version":3,"sources":["app.js"],"names":["Message","chalk","require","mqtt","client","connect","MQTT","HOST","moment","on","console","log","SUB_TOPIC","subscribe","packet","cmd","green","topic","JSON","stringify","subscriptions","message","isValidInComingMessage","payload","getPayloadByStrip0D0A","parsedResult","parsePayload","pubTopics","mac1","mac2","payloadType","Constants","PAYLOAD_FCFD_TYPE_DATA","parsedData","parseDataPayload","data","getPayloadType","serializedObjectJsonString","PUB_PREFIX","name","forEach","idx","publish","retain","PAYLOAD_FAFB_TYPE_DEVICE_REGISTRATION","time","Date","getTime","serializedDevice","length","tz"],"mappings":"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","file":"app.js","sourcesContent":["\n\nimport { CONFIG } from './conf'\nimport * as Message from './utils'\n\nconst chalk = require('chalk')\nconst mqtt = require('mqtt')\nconst client = mqtt.connect(`mqtt://${CONFIG.MQTT.HOST}`)\nconst moment = require('moment-timezone')\n// const _ = require('underscore')\n\nclient.on('connect', function () {\n  console.log(`mqtt connected being subscribed to ${CONFIG.MQTT.SUB_TOPIC}`)\n  client.subscribe(CONFIG.MQTT.SUB_TOPIC)\n})\n\nclient.on('packetsend', function (packet) {\n  if (packet.cmd === 'publish') {\n    console.log(`published to ${chalk.green(packet.topic)}`)\n  } else if (packet.cmd === 'subscribe') {\n    console.log(`send subscriptions to ${chalk.green(JSON.stringify(packet.subscriptions))}`)\n  }\n})\n\nclient.on('message', function (topic, message) {\n  if (Message.isValidInComingMessage(message)) {\n    const payload = Message.getPayloadByStrip0D0A(message)\n    if (payload !== null) {\n      const parsedResult = Message.parsePayload(payload)\n      let pubTopics = []\n      let mac1 = parsedResult.mac1\n      let mac2 = parsedResult.mac2\n      if (parsedResult.payloadType === Message.Constants.PAYLOAD_FCFD_TYPE_DATA) {\n        const parsedData = Message.parseDataPayload(parsedResult.data, Message.getPayloadType(message))\n        delete parsedResult.payloadType\n        console.log(` parsedData = `, parsedData)\n        console.log(` parsedResult = `, parsedResult)\n        // console.log(`${type} ${name} ${val1} ${val2} ${val3} ${batt}`)\n        let serializedObjectJsonString = JSON.stringify(parsedData)\n        // `${CONFIG.MQTT.PUB_PREFIX}/raw/${mac1String}/${mac2String}/status`,\n        // eslint-disable-next-line no-unused-vars\n        pubTopics = [\n          `${CONFIG.MQTT.PUB_PREFIX}/${mac1}/${mac2}/status`,\n          `${CONFIG.MQTT.PUB_PREFIX}/${mac1}/${parsedData.name}/status`\n        ]\n        pubTopics.forEach((topic, idx) => {\n          client.publish(topic, serializedObjectJsonString, {retain: false})\n        })\n        console.log(pubTopics)\n      } else if (parsedResult.payloadType === Message.Constants.PAYLOAD_FAFB_TYPE_DEVICE_REGISTRATION) {\n        delete parsedResult.payloadType\n        parsedResult.time = new Date().getTime()\n        let serializedDevice = JSON.stringify(parsedResult)\n        pubTopics = [`${CONFIG.MQTT.PUB_PREFIX}/${mac1}/command`]\n        pubTopics.forEach((topic, idx) => {\n          client.publish(topic, serializedDevice, {retain: false})\n        })\n      }\n    } else {\n      console.log(message)\n      console.log('================')\n      console.log('================')\n      console.log(message.length)\n      console.log('invalid packet header.')\n      console.log('================')\n      console.log('================')\n    }\n  }\n})\nconsole.log(`Application started ${moment().tz('Asia/Bangkok')}`)\n"],"sourceRoot":"/Users/nat/espnow_serial_bridge/espnow-mqtt/dist"}