<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>WebSocketTester</title>
    <style type="text/css" media="screen">
        input {
            width: 300px;
            padding: 0 20px;
        }

        input,
        input::-webkit-input-placeholder {
            font-size: 20px;
            line-height: 3;
        }

        button {
            color: #FFF;
            background-color: #0095ff;
            border-color: #07c;
            display: inline-block;
            position: relative;
            padding: .61538462em 1em;
            vertical-align: middle;
            min-height: 2.46153846em;
            box-sizing: border-box;
            font-weight: 400;
            font-size: 100%;
        }
        button#submitButton {
          background-color: #005fa3;
        }

    </style>
    <script type="text/javascript">
      var startedTime = new Date().getTime()
      var ws = null

      function ge (s) { return document.getElementById(s)}

      function qs (s) { return document.querySelector(s)}

      function ce (s) { return document.createElement(s)}

      function stb () { window.scrollTo(0, document.body.scrollHeight || document.documentElement.scrollHeight) }

      function sendBlob (str) {
        var buf = new Uint8Array(str.length)
        for (var i = 0; i < str.length; ++i) buf[i] = str.charCodeAt(i);
        ws.send(buf)
      }

      function addMessage (m) {
        var msg = ce('div')
        msg.innerText = (((new Date().getTime()) - startedTime) / 1000).toFixed(2) + 's - ' + m
        ge('dbg').insertBefore(msg, qs('#dbg').firstChild)
        // ge("dbg").appendChild(msg);
//        stb()
      }

      function startSocket () {
        ws = new WebSocket('ws://' + document.location.host + '/ws', ['arduino'])
        ws.binaryType = 'arraybuffer'
        ws.onopen = function (e) {
          addMessage('Connected')
        }
        ws.onclose = function (e) {
          addMessage('Disconnected')
        }
        ws.onerror = function (e) {
          console.log('ws error', e)
          addMessage('Error')
        }
        ws.onmessage = function (e) {
          var msg = ''
          if (e.data instanceof ArrayBuffer) {
            msg = 'BIN:'
            var bytes = new Uint8Array(e.data)
            for (var i = 0; i < bytes.length; i++) {
              msg += String.fromCharCode(bytes[i])
            }
          } else {
            msg = 'TXT:' + e.data
          }
          addMessage(msg)
        }

        ge('submitButton').onclick = function (e) {
          e.preventDefault()
          ws.send(ge('input_el').value)
          ge('input_el').value = ''
          return
        }

        ge('myNameButton').onclick = function (e) {
          e.preventDefault()
          ge('input_el').value = 'myName='
          return
        }

        ge('rebootButton').onclick = function (e) {
          e.preventDefault()
          ge('input_el').value = '$REBOOT'
          return
        }
//        ge('input_el').onkeydown = function (e) {
////          stb()
//          if (e.keyCode == 13 && ge('input_el').value != '') {
//            ws.send(ge('input_el').value)
//            ge('input_el').value = ''
//          }
//        }
      }

      function startEvents () {
        var es = new EventSource('/events')
        es.onopen = function (e) {
          addMessage('Events Opened')
        }
        es.onerror = function (e) {
          if (e.target.readyState != EventSource.OPEN) {
            addMessage('Events Closed')
          }
        }
        es.onmessage = function (e) {
          addMessage('Event: ' + e.data)
        }
        es.addEventListener('ota', function (e) {
          addMessage('Event[ota]: ' + e.data)
        }, false)
      }

      function onBodyLoad () {
        startSocket()
        startEvents()
      }
    </script>
</head>
<body id="body" onload="onBodyLoad()">
<div id="input_div">
    <input type="text" value="" id="input_el">
    <button type="button" id="submitButton"><span class="icon-play-white _hover"></span>Submit</button>
    <button type="button" id="myNameButton"><span class="icon-play-white _hover"></span>myName=</button>
    <button type="button" id="rebootButton"><span class="icon-play-white _hover"></span>$REBOOT</button>
</div>
<pre id="dbg"></pre>
</body>
</html>
