{"version":3,"sources":["app.js"],"names":["chalk","require","mqtt","client","connect","MQTT","HOST","moment","_","on","console","log","SUB_TOPIC","subscribe","packet","cmd","green","topic","JSON","stringify","subscriptions","message","length","slice","statusObject","mac1","mac2","len","payload","_payload","toString","cyan","yellow","type","name","mac1String","mac2String","val1","readUInt32LE","val2","val3","batt","extend","myName","sensor","parseInt","updated","unix","updatedText","tz","format","serializedObjectJsonString","pubTopics","PUB_PREFIX","forEach","idx","publish","retain"],"mappings":"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","file":"app.js","sourcesContent":["\n\nimport { CONFIG } from './conf'\nimport { checksum } from './utils'\n\nconst chalk = require('chalk')\nconst mqtt = require('mqtt')\nconst client = mqtt.connect(`mqtt://${CONFIG.MQTT.HOST}`)\nconst moment = require('moment-timezone')\nconst _ = require('underscore')\n\nclient.on('connect', function () {\n  console.log(`mqtt connected being subscribed to ${CONFIG.MQTT.SUB_TOPIC}`)\n  client.subscribe(CONFIG.MQTT.SUB_TOPIC)\n})\n\nclient.on('packetsend', function (packet) {\n  // console.log(`packetsend`, packet);\n  if (packet.cmd === 'publish') {\n    console.log(`published to ${chalk.green(packet.topic)}`)\n  } else if (packet.cmd === 'subscribe') {\n    console.log(`send subscriptions to ${chalk.green(JSON.stringify(packet.subscriptions))}`)\n  }\n})\n\nclient.on('message', function (topic, message) {\n  console.log(`==================================`)\n  // console.log(`orig message = `, message);\n\n  // rhythm 0xd0xa$\n  if (message[message.length - 2] === 0x0d) {\n    message = message.slice(0, message.length - 2)\n  }\n  // console.log(`     message = `, message);\n\n  let statusObject = {}\n  if (checksum(message)) {\n    if (message[0] === 0xfc && message[1] === 0xfd) {\n      let mac1, mac2\n      let len = message[2 + 6 + 6]\n      let payload = message.slice(2 + 6 + 6 + 1, message.length - 1)\n      mac1 = message.slice(2, 2 + 6)\n      mac2 = message.slice(2 + 6, 2 + 6 + 6)\n\n      if (payload[0] === 0xff && payload[1] === 0xfa) {\n        let _payload = payload.slice(2).toString('hex')\n        console.log(`len = ${chalk.cyan(len)}, payload = ${chalk.yellow(`fffa`)}${chalk.cyan(_payload)}`)\n        let type = payload.slice(2, 5)\n        let name = payload.slice(5, 11)\n        let mac1String = mac1.toString('hex')\n        let mac2String = mac2.toString('hex')\n        let [val1, val2, val3, batt] = [\n          payload.readUInt32LE(11) || 0,\n          payload.readUInt32LE(15) || 0,\n          payload.readUInt32LE(19) || 0,\n          payload.readUInt32LE(23) || 0\n        ]\n\n        _.extend(statusObject, {\n          myName: name.toString(),\n          type: type.toString('hex'),\n          sensor: type.toString('hex'),\n          val1: parseInt(val1.toString()),\n          val2: parseInt(val2.toString()),\n          val3: parseInt(val3.toString()),\n          batt: parseInt(batt.toString()),\n          mac1: mac1String,\n          mac2: mac2String,\n          updated: moment().unix().toString(),\n          updatedText: moment().tz('Asia/Bangkok').format('DD/MMMM/YYYY, hh:mm:ss a')\n        })\n\n        console.log(`==================================`)\n        console.log(`type = `, statusObject.type)\n        console.log(`name = `, statusObject.name)\n        console.log(`val1 = `, statusObject.val1)\n        console.log(`val2 = `, statusObject.val2)\n        console.log(`val3 = `, statusObject.val3)\n        console.log(`batt = `, statusObject.batt)\n        console.log(`[master] mac1 = `, statusObject.mac1)\n        console.log(`[ slave] mac2 = `, statusObject.mac2)\n        console.log(`==================================`)\n\n        let serializedObjectJsonString = JSON.stringify(statusObject)\n        // eslint-disable-next-line no-unused-vars\n        let pubTopics = [\n          `${CONFIG.MQTT.PUB_PREFIX}/${mac1String}/${mac2String}/status`,\n          `${CONFIG.MQTT.PUB_PREFIX}/raw/${mac1String}/${mac2String}/status`,\n          `${CONFIG.MQTT.PUB_PREFIX}/${mac1String}/${name.toString()}/status`\n        ].forEach((topic, idx) => {\n          client.publish(topic, serializedObjectJsonString, {retain: false})\n        })\n      } else {\n        console.log('invalid header')\n      }\n    }\n  } else {\n    console.log(message)\n    console.log('================')\n    console.log('================')\n    console.log(message.length)\n    console.log('invalid checksum')\n    console.log('================')\n    console.log('================')\n  }\n})\n\nconsole.log(`Application started ${moment().tz('Asia/Bangkok')}`)\n"],"sourceRoot":"/Users/nat/espnow_serial_bridge/espnow-mqtt/dist"}